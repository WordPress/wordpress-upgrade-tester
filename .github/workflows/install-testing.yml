name: Installation Tests

on:
  push:
    branches:
      - trunk
    # Always test the workflow after it's updated.
    paths:
      - '.github/workflows/install-testing.yml'
  pull_request:
    # Always test the workflow when changes are suggested.
    paths:
      - '.github/workflows/install-testing.yml'
  workflow_dispatch:
    inputs:
      wp-version:
        description: 'The version to test installing. Major releases must not end with ".0".'
        type: string
        default: 'latest'

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
  # The concurrency group contains the workflow name and the branch name for pull requests
  # or the commit hash for any other events.
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

# Disable permissions for all available scopes by default.
# Any needed permissions should be configured at the job level.
permissions: {}

jobs:
  # Test the WordPress installation process through WP-CLI.
  #
  # Performs the following steps:
  # - Sets up PHP.
  # - Starts the database server.
  # - Downloads the specified version of WordPress.
  # - Creates a `wp-config.php` file.
  # - Installs WordPress.
  install-tests-mysql:
    name: WP ${{ inputs.new-version || 'latest' }} / PHP ${{ matrix.php }} / ${{ 'mariadb' == matrix.db-type && 'MariaDB' || 'MySQL' }} ${{ matrix.db-version }}${{ matrix.multisite && ' multisite' || '' }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        php: [ '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1', '8.2', '8.3' ]
        db-type: [ 'mysql' ]
        db-version: [ '5.7', '8.0' ]
        multisite: [ false, true ]

    services:
      database:
        image: ${{ matrix.db-type }}:${{ matrix.db-version }}
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=30s --health-timeout=10s --health-retries=5 -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=test_db --entrypoint sh ${{ matrix.db-type }}:${{ matrix.db-version }} -c "exec docker-entrypoint.sh mysqld --default-authentication-plugin=mysql_native_password"

    steps:
      - name: Set up PHP ${{ matrix.php }}
        uses: shivammathur/setup-php@d30ad8b1843ace22e6698ab99bbafaa747b6bd0d # v2.24.0
        with:
          php-version: '${{ matrix.php }}'
          coverage: none
          tools: wp-cli

      - name: Start the database server
        run: |
          sudo systemctl start ${{ matrix.db-type }}

      - name: Download WordPress
        run: wp core download ${{ inputs.wp-version && 'latest' != inputs.wp-version && format( '--version={0}', inputs.wp-version ) || '' }}

      - name: Create wp-config.php file
        run: wp config create --dbname=test_db --dbuser=root --dbpass=root --dbhost=127.0.0.1:${{ job.services.database.ports['3306'] }}

      - name: Install WordPress
        run: wp core ${{ matrix.multisite && 'multisite-' || '' }}install --url=http://localhost/ --title="Upgrade Test" --admin_user=admin --admin_password=password --admin_email=me@example.org --skip-email
